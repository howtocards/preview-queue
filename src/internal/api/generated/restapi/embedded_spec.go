// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A queuing wrapper.",
    "title": "Facade.",
    "version": "0.2.0"
  },
  "basePath": "/",
  "paths": {
    "/render/card": {
      "post": {
        "description": "Render preview and snapshot for card",
        "operationId": "renderCard",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CardRender"
            }
          },
          {
            "$ref": "#/parameters/appName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/render/user": {
      "post": {
        "description": "Render user preview",
        "operationId": "renderUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRender"
            }
          },
          {
            "$ref": "#/parameters/appName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    }
  },
  "definitions": {
    "CardRender": {
      "type": "object",
      "required": [
        "card",
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/url"
        },
        "card": {
          "$ref": "#/definitions/cardPath"
        },
        "extra": {
          "$ref": "#/definitions/extra"
        }
      },
      "example": {
        "callback": "/preview/card/1902",
        "card": "1902",
        "extra": {
          "baz": true,
          "foo": "bar"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UserRender": {
      "type": "object",
      "required": [
        "user",
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/url"
        },
        "extra": {
          "$ref": "#/definitions/extra"
        },
        "user": {
          "$ref": "#/definitions/userPath"
        }
      },
      "example": {
        "callback": "/preview/user/@sergeysova",
        "extra": {
          "baz": true,
          "foo": "bar"
        },
        "user": "@sergeysova"
      }
    },
    "cardPath": {
      "description": "Id or card slug",
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    },
    "extra": {
      "description": "Optional object with any information for render worker",
      "type": "object"
    },
    "url": {
      "type": "string"
    },
    "userPath": {
      "description": "Username to identify user. Should be prefixed @",
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "description": "Name of the app that call api",
      "name": "appName",
      "in": "query"
    }
  },
  "responses": {
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A queuing wrapper.",
    "title": "Facade.",
    "version": "0.2.0"
  },
  "basePath": "/",
  "paths": {
    "/render/card": {
      "post": {
        "description": "Render preview and snapshot for card",
        "operationId": "renderCard",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CardRender"
            }
          },
          {
            "type": "string",
            "description": "Name of the app that call api",
            "name": "appName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/render/user": {
      "post": {
        "description": "Render user preview",
        "operationId": "renderUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRender"
            }
          },
          {
            "type": "string",
            "description": "Name of the app that call api",
            "name": "appName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CardRender": {
      "type": "object",
      "required": [
        "card",
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/url"
        },
        "card": {
          "$ref": "#/definitions/cardPath"
        },
        "extra": {
          "$ref": "#/definitions/extra"
        }
      },
      "example": {
        "callback": "/preview/card/1902",
        "card": "1902",
        "extra": {
          "baz": true,
          "foo": "bar"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UserRender": {
      "type": "object",
      "required": [
        "user",
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/url"
        },
        "extra": {
          "$ref": "#/definitions/extra"
        },
        "user": {
          "$ref": "#/definitions/userPath"
        }
      },
      "example": {
        "callback": "/preview/user/@sergeysova",
        "extra": {
          "baz": true,
          "foo": "bar"
        },
        "user": "@sergeysova"
      }
    },
    "cardPath": {
      "description": "Id or card slug",
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    },
    "extra": {
      "description": "Optional object with any information for render worker",
      "type": "object"
    },
    "url": {
      "type": "string"
    },
    "userPath": {
      "description": "Username to identify user. Should be prefixed @",
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "description": "Name of the app that call api",
      "name": "appName",
      "in": "query"
    }
  },
  "responses": {
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    }
  }
}`))
}
