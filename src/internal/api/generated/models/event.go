// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Event event
// swagger:model event
type Event struct {

	// app ID
	AppID AppID `json:"appID,omitempty"`

	// callback
	// Required: true
	Callback URL `json:"callback"`

	// selector
	// Required: true
	Selector Selector `json:"selector"`

	// url
	// Required: true
	URL URL `json:"url"`

	// user ID
	UserID UserID `json:"userID,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.AppID) { // not required
		return nil
	}

	if err := m.AppID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appID")
		}
		return err
	}

	return nil
}

func (m *Event) validateCallback(formats strfmt.Registry) error {

	if err := m.Callback.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("callback")
		}
		return err
	}

	return nil
}

func (m *Event) validateSelector(formats strfmt.Registry) error {

	if err := m.Selector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selector")
		}
		return err
	}

	return nil
}

func (m *Event) validateURL(formats strfmt.Registry) error {

	if err := m.URL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("url")
		}
		return err
	}

	return nil
}

func (m *Event) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userID")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
